#!/bin/bash

# Enumerate all files that sport the given extension and perform given
# action on them
#
# @param 1 - extension of files to enumerate
# @param ... - functions to call in order for every matching file
enum()
{
	same()
	{
		diff -rq $SRC $DST
	}

	wire()
	{
		rm -rf $DST && ln -s $SRC $DST
	}

	unwire()
	{
		local F
		for F in $IGNORE
		do
			[ $DST == $F ] && return
		done
		same && rm -rf $DST
	}

	include()
	{
		. $SRC
	}

	symlink()
	{
		local DST=${SRC##*/}
		DST=~/.${DST%.*}
		$@
	}

	sh()
	{
		$@
	}

	local D SRC
	for D in $DOTFILES/*
	do
		[ -d $D ] || continue

		# process only files whose parent directory is also a valid command
		type ${D##*/} &>/dev/null || continue

		for SRC in $D/*.$1
		do
			[ -r $SRC ] && $@
		done
	done

	unset sh
	unset symlink
	unset include
	unset unwire
	unset wire
	unset same
}

# Install/update dot file repository
#
# @param 1 - action to perform (optional)
update()
{
	[ -d $DOTFILES ] || return 1

	invocation()
	{
		cat << EOF
export DOTFILES=$DOTFILES
export PATH=\$DOTFILES/bin:\$PATH
. dotfiles initialize
EOF
	}

	show()
	{
		enum symlink same
		invocation | diff -q $DOTFILE_INIT -
	}

	pull()
	{
		IGNORE=~/.gitconfig enum symlink unwire &>/dev/null

		type git &>/dev/null &&
			cd $DOTFILES &&
			git fetch &&
			git merge origin

		enum symlink wire
		invocation > $DOTFILE_INIT
	}

	local DOTFILE_INIT=${DOTFILE_INIT:-~/.bash_aliases}

	${1:-pull}

	unset pull
	unset show
	unset invocation
}

# Print differences between dot file repository and current setup
check()
{
	update show
}

# Source all shell files within $DOTFILES
initialize()
{
	# make sure target command is available
	alias()
	{
		local C ALIAS=${1%%=*} CMD=${@#*=}
		for C in $CMD
		do
			case $C in
				sudo|*=*)
					continue
					;;
			esac

			command -v "$C" &>/dev/null &&
				command alias $ALIAS="$CMD"

			break
		done
	}

	enum sh include
	unset alias
}

readonly DOTFILES=${DOTFILES:-`cd ${0%/*} && echo ${PWD%/*}`}

${@:-check}
