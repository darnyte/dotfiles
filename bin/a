#!/bin/bash

# Parse manifest for given patterns and print first argument value
#
# @param ... - patterns to find in order
manifest()
{
	while read
	do
		for (( ;; ))
		do
			case $REPLY in
				*$1*)
					REPLY=${REPLY##*$1}
					shift
					(( $# > 0 )) && continue
					REPLY=${REPLY%%\"*}
					echo ${REPLY#.}
					return
					;;
			esac

			break
		done
	done < AndroidManifest.xml
}

# Print package
package()
{
	manifest 'package=\"'
}

# Print first activity
activity()
{
	manifest '<activity' 'android:name=\"'
}

# Clean builds & resources
clean()
{
	rm -rf bin gen obj out
}

# Build only
#
# @param ... - additional build arguments
build()
{
	ant ${TARGET:-debug} $@
}

# Build & install
install()
{
	build install
}

# Uninstall package
#
# @param ... - package name (optional)
uninstall()
{
	adb uninstall ${@:-`package`}
}

# Stress test given application
#
# @param 1 - number of pseudo-random events to send (optional)
# @param 2 - package name of application to test (optional)
stress()
{
	adb shell monkey -p ${2:-`package`} -v ${1:-1000}
}

# Start given activity
#
# @param 1 - full package and activity name (optional)
start()
{
	adb shell "am start -n ${1:-`package`/.`activity`}"
}

# Build, install & run
run()
{
	local PACKAGE

	PACKAGE=`package` &&
		[ "$PACKAGE" ] &&
		install &&
		start "${PACKAGE}/.`activity`"
}

# Run release, needs key.store & key.name to be set in ant.properties
release()
{
	TARGET=release ${@:-run}
}

# Run debug
debug()
{
	TARGET=debug ${@:-run}
}

# List available emulators or only the requested one
#
# @param 1 - index of emulator to echo (optional)
emus()
{
	local AVD N=1 I=${1:-0}

	for AVD in ~/.android/avd/*.ini
	do
		[ -r "$AVD" ] || continue

		AVD=${AVD##*/}
		AVD=${AVD%.ini}

		if (( !I ))
		then
			printf "%3d %s\n" $N $AVD
		elif (( N == I ))
		then
			echo $AVD
			break
		fi

		(( ++N ))
	done
}

# Fire up given (or last used) emulator
#
# @param 1 - name or number of avd (optional)
emu()
{
	local AVD=${1:-`ls -t ~/.android/avd/ | head -n 1`}

	(( $AVD > 0 )) &>/dev/null && AVD=`emus $AVD`

	emulator -avd ${AVD%.avd} &
}

# Echo latest target identifier
latest_target()
{
	android list target -c | grep android | tail -n 1
}

# Update existing sources with build.xml file
update()
{
	[ -r project.properties ] ||
		if [ -r default.properties ]
		then
			mv default.properties project.properties
		else
			cat <<EOF > project.properties
target=`latest_target`
EOF
		fi

	android update project --path .
}

# Create a new android project
#
# @param 1 - full namespace with default activity
# @param 2 - SDK target version (optional)
create()
{
	local P=${1%.} A=

	if (( $# < 1 )) || [[ $P != *.* ]]
	then
		echo 'error: missing namespace and/or main activity' >&2
		return 1
	fi

	A=${P##*.}

	if [[ $A != [A-Z]* ]]
	then
		A=MainActivity
	else
		P=${P%.*}
	fi

	android create project \
		--target ${2:-`latest_target`} \
		--package $P \
		--activity $A \
		--path .
}

${@:-debug}
