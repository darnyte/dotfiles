#!/usr/bin/env bash

# Print a bar chart from NAME VALUE pairs given on STDIN
chart() {
	local TMP MIN=0 MAX=0 NAME VALUE
	TMP=$(mktemp)
	while read -r NAME VALUE
	do
		(( VALUE > MAX )) && MAX=$VALUE
		(( VALUE < MIN )) && MIN=$VALUE
		echo "$NAME" "$VALUE"
	done > "$TMP"
	local COLS=${COLS:-$(tput cols)}
	((COLS -= 21))
	local PBAR=${POSITIVES:-'*'} NBAR=${NEGATIVES:-'-'} BLANK=' '
	while ((${#PBAR} < COLS))
	do
		PBAR=$PBAR$PBAR
		NBAR=$NBAR$NBAR
		BLANK=$BLANK$BLANK
	done
	((MIN < 0)) && {
		((MAX -= MIN))
		((MIN = -MIN))
	}
	local F=$(((MAX << 16) / COLS)) BAR
	((F < 1)) && F=1
	while read -r NAME VALUE
	do
		if ((VALUE > 0))
		then
			BAR=${BLANK:0:$(((MIN << 16) / F))}
			BAR=$BAR${PBAR:0:$(((VALUE << 16) / F))}
		else
			BAR=${BLANK:0:$((((MIN + VALUE) << 16) / F))}
			BAR=$BAR${NBAR:0:$(((-VALUE << 16) / F))}
		fi
		printf '%10s %7s %s\n' \
			"$NAME" \
			"$VALUE" \
			"$BAR"
	done < "$TMP"
	rm -rf "$TMP"
}

# Calculate average length of commit messages
commit_message_length() {
	local MESSAGE='' MESSAGES=0 LENGTH=0
	while read -r
	do
		[ -z "$MESSAGE" ] && {
			if [[ "$REPLY" == "{{{"* ]]
			then
				REPLY=${REPLY#* }
			else
				continue
			fi
		}
		MESSAGE=$MESSAGE${REPLY%'}}}'}
		[[ "$REPLY" == *'}}}' ]] && {
			((++MESSAGES))
			((LENGTH += ${#MESSAGE}))
			MESSAGE=
		}
	done
	if ((MESSAGES > 0))
	then
		echo "The average length of a commit message was $((LENGTH / MESSAGES)) characters."
	fi
}

# Filter commits into days of the week
commits_per_weeday() {
	local MON=0 TUE=0 WED=0 THU=0 FRI=0 SAT=0 SUN=0
	while read -r DAY REST
	do
		case "$DAY" in
			Mon*) ((++MON));;
			Tue*) ((++TUE));;
			Wed*) ((++WED));;
			Thu*) ((++THU));;
			Fri*) ((++FRI));;
			Sat*) ((++SAT));;
			Sun*) ((++SUN));;
		esac
	done
	cat << EOF
Monday $MON
Tuesday $TUE
Wednesday $WED
Thursday $THU
Friday $FRI
Saturday $SAT
Sunday $SUN
EOF
}

# Filter commits into months
commits_per_month() {
	local JAN=0 FEB=0 MAR=0 APR=0 MAY=0 JUN=0
	local JUL=0 AUG=0 SEP=0 OCT=0 NOV=0 DEC=0
	while read -r _ _ MONTH _
	do
		case "$MONTH" in
			Jan*) ((++JAN));;
			Feb*) ((++FEB));;
			Mar*) ((++MAR));;
			Apr*) ((++APR));;
			May*) ((++MAY));;
			Jun*) ((++JUN));;
			Jul*) ((++JUL));;
			Aug*) ((++AUG));;
			Sep*) ((++SEP));;
			Oct*) ((++OCT));;
			Nov*) ((++NOV));;
			Dec*) ((++DEC));;
		esac
	done
	cat << EOF
Jan $JAN
Feb $FEB
Mar $MAR
Apr $APR
May $MAY
Jun $JUN
Jul $JUL
Aug $AUG
Sep $SEP
Oct $OCT
Nov $NOV
Dec $DEC
EOF
}

# Filter lines of code into days of the week
loc_per_weeday() {
	local INSERTS=() DELETIONS=() DAY=7
	while read -r FIRST SECOND _
	do
		case "$FIRST" in
			'-') ;;
			[0-9]*)
				((DAY > 6)) && continue
				((FIRST > 0)) && ((INSERTS[DAY] += FIRST))
				((SECOND > 0)) && ((DELETIONS[DAY] += SECOND))
				;;
			Mon*) DAY=0;;
			Tue*) DAY=1;;
			Wed*) DAY=2;;
			Thu*) DAY=3;;
			Fri*) DAY=4;;
			Sat*) DAY=5;;
			Sun*) DAY=6;;
		esac
	done
	cat << EOF
Monday $((INSERTS[0] - DELETIONS[0]))
Tuesday $((INSERTS[1] - DELETIONS[1]))
Wednesday $((INSERTS[2] - DELETIONS[2]))
Thursday $((INSERTS[3] - DELETIONS[3]))
Friday $((INSERTS[4] - DELETIONS[4]))
Saturday $((INSERTS[5] - DELETIONS[5]))
Sunday $((INSERTS[6] - DELETIONS[6]))
EOF
}

# Filter lines of code into months
loc_per_month() {
	local INSERTS=() DELETIONS=() MONTH=12
	while read -r FIRST SECOND REST
	do
		case "$FIRST" in
			'-') ;;
			[0-9]*)
				((MONTH > 11)) && continue
				((FIRST > 0)) && ((INSERTS[MONTH] += FIRST))
				((SECOND > 0)) && ((DELETIONS[MONTH] += SECOND))
				;;
			*)
				case "$REST" in
					Jan*) MONTH=0;;
					Feb*) MONTH=1;;
					Mar*) MONTH=2;;
					Apr*) MONTH=3;;
					May*) MONTH=4;;
					Jun*) MONTH=5;;
					Jul*) MONTH=6;;
					Aug*) MONTH=7;;
					Sep*) MONTH=8;;
					Oct*) MONTH=9;;
					Nov*) MONTH=10;;
					Dec*) MONTH=11;;
				esac
				;;
		esac
	done
	cat << EOF
Jan $((INSERTS[0] - DELETIONS[0]))
Feb $((INSERTS[1] - DELETIONS[1]))
Mar $((INSERTS[2] - DELETIONS[2]))
Apr $((INSERTS[3] - DELETIONS[3]))
May $((INSERTS[4] - DELETIONS[4]))
Jun $((INSERTS[5] - DELETIONS[5]))
Jul $((INSERTS[6] - DELETIONS[6]))
Aug $((INSERTS[7] - DELETIONS[7]))
Sep $((INSERTS[8] - DELETIONS[8]))
Oct $((INSERTS[9] - DELETIONS[9]))
Nov $((INSERTS[10] - DELETIONS[10]))
Dec $((INSERTS[11] - DELETIONS[11]))
EOF
}

# Most used words in commit messages; ignoring words up to three letters
#
# @param 1 - number of words (optional)
top_words() {
	grep -Eoa '[a-zA-Z0-9]+' |
		fgrep -vE '(^[a-zA-Z]{1,3}$|^[0-9]+$)' |
		sort |
		uniq -c |
		sort -rn |
		head -n ${1:-3} | while read -r COUNT WORD
	do
		echo "$WORD $COUNT"
	done
}

# Browse all git repositories and create an annual activity report
#
# ... - source directories (optional)
annual_report() {
	local SINCE UNTIL
	YEAR=${YEAR:-$(date +%Y)}
	SINCE="${YEAR}-01-01"
	UNTIL="$((YEAR + 1))-01-01"

	local AUTHOR AUTHOR_TAGS=''
	for AUTHOR in ${AUTHORS:-$(git config user.email)}
	do
		AUTHOR_TAGS=$AUTHOR_TAGS${AUTHOR_TAGS:+' '}"--author=$AUTHOR"
	done

	local PROJECTS=0
	local COMMITS=0

	local CACHE_PREFIX="$PWD/${0##*/}-$$"
	local CACHE_ALL="${CACHE_PREFIX}-all"
	local CACHE_PROJECT="${CACHE_PREFIX}-project"
	local CACHE_LOC="${CACHE_PREFIX}-loc"
	local CACHE_MESSAGES="${CACHE_PREFIX}-messages"
	rm_cache() {
		rm -f "${CACHE_PREFIX}"*
	}
	rm_cache

	local DIRECTORY
	while read -r DIRECTORY
	do
		DIRECTORY=${DIRECTORY%/.git}

		# $AUTHOR_TAGS and *_EXTRA_ARGS are expanded and cannot be quoted
		# shellcheck disable=SC2086
		(cd "$DIRECTORY" && [ -d '.git' ] &&
			git log \
				--branches \
				--since="$SINCE" \
				--until="$UNTIL" \
				--format='tformat:%aD' \
				$AUTHOR_TAGS \
				$PROJECTS_EXTRA_ARGS > "$CACHE_PROJECT" &&
			git log -c \
				--numstat \
				--branches \
				--since="$SINCE" \
				--until="$UNTIL" \
				--format='tformat:%aD' \
				$AUTHOR_TAGS \
				$LOC_EXTRA_ARGS >> "$CACHE_LOC" &&
			git log \
				--branches \
				--since="$SINCE" \
				--until="$UNTIL" \
				--format='tformat:{{{%B}}}' \
				$AUTHOR_TAGS \
				$MESSAGES_EXTRA_ARGS >> "$CACHE_MESSAGES"
		) || {
			echo "error: failed to process $DIRECTORY" >&2
			continue
		}

		local N
		N=$(wc -l < "$CACHE_PROJECT")
		((N > 0)) && {
			cat "$CACHE_PROJECT" >> "$CACHE_ALL"
			((++PROJECTS))
			((COMMITS += N))
		}
	done

	echo "In $YEAR ${WHO:-you} made $COMMITS commits in $PROJECTS projects."
	((COMMITS > 0)) && {
		commit_message_length < "$CACHE_MESSAGES"
		echo

		echo 'Commits per weekday'
		commits_per_weeday < "$CACHE_ALL" | chart
		echo

		echo 'Commits per month'
		commits_per_month < "$CACHE_ALL" | chart
		echo

		echo 'Lines added (+) and removed (-) per weekday'
		loc_per_weeday < "$CACHE_LOC" | POSITIVES='+' chart
		echo

		echo 'Lines added (+) and removed (-) per month'
		loc_per_month < "$CACHE_LOC" | POSITIVES='+' chart
		echo

		echo 'Top 3 words in commit messages (ignoring words up to three letters)'
		top_words < "$CACHE_MESSAGES" | chart
		echo
	}

	rm_cache
	unset rm_cache
}

# Create annual reports
#
# @param ... - list file of directories or parent directory
process() {
	local QUEUE="$PWD/${0##*/}-$$-queue"
	for F
	do
		if [ -d "$F" ]
		then
			find "$F" -type d -name '.git' >> "$QUEUE"
		else
			cat "$F" >> "$QUEUE"
		fi
	done
	annual_report < "$QUEUE"
	rm -f "$QUEUE"
}

if [ "${BASH_SOURCE[0]}" == "$0" ]
then
	process "$@"
fi
