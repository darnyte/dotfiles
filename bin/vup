#!/usr/bin/env bash

# check for required tools
for X in find grep sed mktemp
do
	which $X &>/dev/null || {
		echo "error: missing $X" >&2
		exit 1
	}
done

[ "$1" == -h ] && {
	echo "usage: ${0##*/} [-h] [release|upgrade|update|N[.N[.N]]]"
	exit
}

IGNORE=${IGNORE:-ChangeLog NEWS}
SRC=${SRC:-configure}

[ "$VERSION" ] || [ -r "$SRC" ] && {
	VERSION=`grep 'VERSION=' "$SRC"`
	VERSION=${VERSION##*=}
}

[ "$VERSION" ] || {
	echo "error: no version number found or given" >&2
	exit 1
}

# trim string
VERSION=`echo $VERSION`

[[ $VERSION == [0-9]*\.[0-9]*\.[0-9]* ]] || {
	echo "error: unsupported version format, expected x.x.x" >&2
	exit 1
}

RELEASE=${VERSION%%.*}
UPGRADE=${VERSION%.*}; UPGRADE=${UPGRADE#*.}
UPDATE=${VERSION##*.}

ARG=${1:-update}

case "$ARG" in
	r*)
		(( ++RELEASE ))
		NEW=$RELEASE.0.0
		;;
	upg*)
		(( ++UPGRADE ))
		NEW=$RELEASE.$UPGRADE.0
		;;
	upd*)
		(( ++UPDATE ))
		NEW=$RELEASE.$UPGRADE.$UPDATE
		;;
	[0-9]*\.[0-9]*\.[0-9]*)
		NEW=$ARG
		;;
	[0-9]*\.[0-9]*)
		NEW=$ARG.0
		;;
	[0-9]*)
		NEW=$ARG.0.0
		;;
	*)
		echo "error: unknown argument $ARG" >&2
		exit 1
		;;
esac

echo "updating $VERSION to $NEW"

# escape the dots
VERSION=${VERSION//\./\\.}

# use find because grep on OSX/BSD doesn't know --recursive
for FILE in `find . -type f -exec grep -l "$VERSION" {} \;`
do
	# alternatively, use --exclude= with GNU grep if available
	[[ $IGNORE == *${FILE##*/}* ]] && continue

	# ignore hidden files and directories
	[[ $FILE == */\.* ]] && continue

	TMP=`mktemp $FILE.XXXXXXXXXX`

	if sed -e "s_${VERSION}_${NEW}_g" < $FILE > $TMP &&
		mv $TMP $FILE
	then
		echo $FILE
	else
		echo "error: cannot process $FILE" >&2
	fi
done
