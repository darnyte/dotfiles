#!/usr/bin/env bash

# Generates sparklines for a set of data
# Original idea by @holman, see https://github.com/holman/spark
#
# Since we want to support bash3, spark can only process integers.
# However, if your system has awk you may use this alias for
# floating point input:
#
# alias fspark="awk '{ for(i = 1; i <= NF; ++i) print \$i*1000 }' | spark"
#
# @param ... - (optionally comma-separated) list of data
spark() {
	local N NUMBERS=

	# find min/max values
	local MIN=${MIN:-0xffffffff} MAX=${MAX:-0}

	# @ should expand to more words
	# shellcheck disable=SC2068
	for N in ${@//,/ }
	do
		# On Linux (with bash4) we could use `printf %.0f $n`
		# to round the number but that doesn't work on OS X
		# (bash3) nor does `awk '{printf "%.0f",$1}' <<< $n`
		# work, so just cut it off.
		N=${N%.*}

		(( N < MIN )) && MIN=$N
		(( N > MAX )) && MAX=$N

		NUMBERS=$NUMBERS${NUMBERS:+ }$N
	done

	# print ticks
	local TICKS=(▁ ▂ ▃ ▄ ▅ ▆ ▇ █)

	local F=$(( ((MAX-MIN)<<8)/(${#TICKS[@]}-1) ))
	(( F < 1 )) && F=1

	for N in $NUMBERS
	do
		printf '%s' "${TICKS[$(( (((N-MIN)<<8)/F) ))]}"
	done
	printf "\\n"
}

# if this file is sourced, don't worry about such things
if [ "${BASH_SOURCE[0]}" == "$0" ]
then
	# Prints the help text
	help() {
		local SPARK=${0##*/}

		cat <<EOF
usage: $SPARK [-h|--help] VALUE,...

examples:

    $ $SPARK 1 5 22 13 53
    ▁▁▃▂█

    $ $SPARK 0,30,55,80,33,150
    ▁▂▃▄▂█

    $ echo 9 13 5 17 1 | $SPARK
    ▄▆▂█▁

    $ MAX=10 $SPARK 5 3
    ▃▁

EOF
	}

	# show help for no arguments if stdin is a terminal
	if { [ -z "$1" ] && [ -t 0 ] ; } ||
		[ "$1" == '-h' ] ||
		[ "$1" == '--help' ]
	then
		help
		exit 0
	fi

	spark "${@:-$(cat)}"
fi
