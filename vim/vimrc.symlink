set nocompatible
set ts=4
set sw=4
set ls=0
set nowrap
set noruler
set breakindent
set breakindentopt=shift:4
set linebreak
set autoindent
set viminfo^=h
set modelines=1
set cm=blowfish2

syntax on

" Begin syntax synchronisation always from the start
autocmd BufEnter * :syntax sync fromstart

" Use kotlin colorscheme for Kotlin sources
autocmd BufEnter *.kt colorscheme kotlin

" Remove trailing white space before saving
autocmd BufWritePre * :%s/\s\+$//e

" Color scheme settings
set background=dark
"let g:solarized_termcolors=256

set t_Co=256
color android

" Always show as much as possible of the last line instead of @
set display+=lastline

" Change matching parenthesis style
hi MatchParen cterm=bold ctermbg=none ctermfg=none

" Always move cursor up/down by visual line instead of text line
noremap j gj
noremap k gk

" Break marker
set colorcolumn=81

" Highlight search matches
set hlsearch

" Set wrapping for certain file types
au FileType html,tex,markdown set wrap

" Additional file types
au BufNewFile,BufRead *.dart set filetype=dart
au BufNewFile,BufRead *.glsl set filetype=glsl
au BufNewFile,BufRead *.go set filetype=go
au BufNewFile,BufRead *.hx set filetype=haxe
au BufNewFile,BufRead *.jl set filetype=julia
au BufNewFile,BufRead *.kt set filetype=kotlin
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.nim set filetype=nim

" Set a default file type
au BufNewFile,BufRead * setf markdown

" Use tab to complete words
" (from http://vim.wikia.com/wiki/Autocomplete_with_TAB_when_typing_words)
function! TabComplete()
	if col( '.' ) > 1 && strpart( getline( '.' ), col( '.' )-2, 3 ) =~ '^\w'
		return "\<C-N>"
	else
		return "\<Tab>"
	endif
endfunction
inoremap <Tab> <C-R>=TabComplete()<CR>

" Focus mode
" (originally from https://gist.github.com/1824502)
function! ToggleFocusMode()
	if( &foldcolumn != 12 )
		set foldcolumn=12
		set columns=60
		set wrap
		set display=lastline
		hi FoldColumn ctermbg=none
		hi NonText ctermfg=0
	else
		set foldcolumn=0
	endif
endfunc
nnoremap <F1> :call ToggleFocusMode()<CR>

" Disable auto-indent for pasting from clipboard
set pastetoggle=<F2>

" Convert spaces to tabs
nnoremap <F3> :%s/    /\t/g<CR>

" Fold by indent
nnoremap <F4> :set foldmethod=indent<CR>

" Disable highlighting of search pattern matches
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Cycle through open buffers
nnoremap <silent> <C-j> :bn<CR>
nnoremap <silent> <C-k> :bp<CR>

" Use tabs
function! UseTabs()
	" Highlight tabs within lines, trailing whitespace and
	" spaces at the beginning of lines
	match errorMsg /[^\t]\zs\t\+\|\s\+$\|^[\t]*[ ]\+[\t]*[^\*]\|\%xa0/
	set noexpandtab
endfunc
nnoremap <F5> :call UseTabs()<CR>

" Use tabs by default
call UseTabs()

" Use spaces
function! UseSpaces()
	" Highlight tabs
	match errorMsg /[\t]\|\%xa0/
	set expandtab
endfunc
nnoremap <F6> :call UseSpaces()<CR>

" Toggle hex mode
function! ToggleHexMode()
	if !exists( "b:hexMode" ) || !b:hexMode
		let b:hexMode=1
		%!xxd
	else
		let b:hexMode=0
		%!xxd -r
	endif
endfunc
nnoremap <F7> :call ToggleHexMode()<CR>

" Transparent editing of gpg encrypted files.
" By Wouter Hanegraaff
augroup encrypted
	au!

	" First make sure nothing is written to ~/.viminfo while editing
	" an encrypted file.
	autocmd BufReadPre,FileReadPre *.gpg set viminfo=
	" We don't want a swap file, as it writes unencrypted data to disk
	autocmd BufReadPre,FileReadPre *.gpg set noswapfile

	" Switch to binary mode to read the encrypted file
	autocmd BufReadPre,FileReadPre *.gpg set bin
	autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
	" (If you use tcsh, you may need to alter this line.)
	autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2> /dev/null

	" Switch to normal mode for editing
	autocmd BufReadPost,FileReadPost *.gpg set nobin
	autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
	autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")

	" Convert all text to encrypted text before writing
	" (If you use tcsh, you may need to alter this line.)
	autocmd BufWritePre,FileWritePre *.gpg '[,']!gpg --default-recipient-self -ae 2>/dev/null
	" Undo the encryption so we are back in the normal text, directly
	" after the file has been written.
	autocmd BufWritePost,FileWritePost *.gpg u
augroup END
